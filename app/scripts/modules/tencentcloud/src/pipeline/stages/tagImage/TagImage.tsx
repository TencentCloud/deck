import * as React from 'react';
import { IStageConfigProps, StageConfigField, TextInput } from '@spinnaker/core';
// import { Subject } from 'rxjs';
import { get } from 'lodash';

import './style.less';

interface ITagImageProps extends IStageConfigProps {}

interface ITagImageState {}

export class TagImage extends React.Component<ITagImageProps, ITagImageState> {
  // private destroy$ = new Subject();
  public state: ITagImageState = {};

  private objToArr = (obj: { [key: string]: string }) => {
    return Object.keys(JSON.parse(JSON.stringify(obj))).map((key: string) => ({ label: key, value: obj[key] }));
  };

  private arrToObj = (arr: Array<{ label: string; value: string }> = []) => {
    const result: { [key: string]: string } = {};
    arr.forEach(item => (result[item.label] = item.value));
    return JSON.parse(JSON.stringify(result));
  };

  render() {
    const { stage, updateStageField } = this.props;
    const imageTagArr = this.objToArr(get(stage, 'tags', {}));
    return (
      <div className="form-horizontal">
        <StageConfigField label="Tags">
          <>
            <div className={'tag-image-label'}>
              <div>Key</div>
              <div>Values</div>
            </div>
            <div>
              {imageTagArr.map((item: { label: string; value: string }, index: number) => (
                <div key={index} className={'input-group-row'}>
                  <TextInput
                    value={item.label}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                      const imageTag = [...imageTagArr];
                      imageTag.splice(index, 1, {
                        label: e.target.value,
                        value: item.value,
                      });
                      updateStageField({
                        tags: this.arrToObj(imageTag),
                      });
                    }}
                  />
                  <TextInput
                    value={item.value}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                      const imageTag = [...imageTagArr];
                      imageTag.splice(index, 1, {
                        label: item.label,
                        value: e.target.value,
                      });
                      updateStageField({
                        tags: this.arrToObj(imageTag),
                      });
                    }}
                  />
                  <button
                    style={{ display: 'inline-block', marginLeft: '10px' }}
                    className="btn btn-sm btn-default"
                    onClick={() => {
                      const imageTag = [...imageTagArr];
                      imageTag.splice(index, 1);
                      updateStageField({
                        tags: this.arrToObj(imageTag),
                      });
                    }}
                  >
                    <span className="glyphicon glyphicon-trash" />
                  </button>
                </div>
              ))}
              <button
                className="btn btn-block btn-add-trigger add-new"
                onClick={() => {
                  const imageTag = [...imageTagArr, { label: '', value: '' }];
                  updateStageField({
                    tags: this.arrToObj(imageTag),
                  });
                }}
              >
                <span className="glyphicon glyphicon-plus-sign" />
                Add Field
              </button>
            </div>
          </>
        </StageConfigField>
        <StageConfigField label="Stages (optional)">
          <span>
            Limit which previous stages will be considered when locating AMI's to tag. If left unchecked, AMI's
            generated by any upstream stage will be tagged.
          </span>
        </StageConfigField>
      </div>
    );
  }
}
